trigger:
  - main

pr: none

variables:
  - group: ugnext

pool:
  vmImage: ubuntu-latest

steps:
  - task: Npm@1
    inputs:
      command: "custom"
      customCommand: "install -g bun"
      verbose: true
    displayName: "Install bun using npm"

  - script: |
      bun bun.lockb > bun.lockb.txt
    displayName: "Output text version of bun.lockb"

  - script: |
      bun install --frozen-lockfile
    displayName: "Install dependencies using bun"

  - task: Cache@2
    inputs:
      key: "next | $(Agent.OS) | bun.lockb.txt"
      path: "$(System.DefaultWorkingDirectory)/.next/cache"
    displayName: "Cache .next/cache"

  - script: |
      find pages -mindepth 1 ! -name "404.js" ! -name "500.js" ! -name "_app.js" ! -name "_document.js" ! -name "index.js" ! -name "ens-test.js" -exec rm -rf {} +
    displayName: "Remove all pages except home, template and error pages"

  - script: |
      bun run static-build
    displayName: "Build site"

  - script: |
      find out/_next -mindepth 1 -maxdepth 1 ! -name "static" -exec rm -rf {} +
    displayName: "Remove all folders in _next except static"

  - task: CopyFiles@2
    inputs:
      SourceFolder: 'out/_next'
      Contents: '**'
      TargetFolder: 'out/_next-home/_next'
    displayName: "Copy _next folder to _next-home"

  - task: DeleteFiles@1
    inputs:
      contents: "out/_next"
    displayName: "Remove _next folder"

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: "out"
      includeRootFolder: false
      archiveType: "zip"
      archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
      replaceExistingArchive: true
    displayName: "Archive output folder"

  - publish: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
    artifact: zipOutput
    displayName: "Publish Artifact"
